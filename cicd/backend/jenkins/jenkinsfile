pipeline {
  agent any

  stages {

    stage('clone repository'){
      steps {
        echo "Cloning Repository"
          git branch: 'backend/develop', url: 'https://github.com/beyond-sw-camp/be06-fin-SYNergy-ComeGongBang.git'
      }
    }
    stage('build'){
      steps {
        echo "${pwd()}"
        echo "Add Permission"
            sh 'chmod +x ./backend/gradlew'
            echo "Gradle Build"

            sh '''
              cd ./backend
              ./gradlew bootjar
            '''
      }
    }
      stage('Docker Push') {
        steps {
          script {
            // Docker build
            sh "docker build -f cicd/backend/docker/Dockerfile --tag ${DOCKER_IMAGE_BACK}:1.${env.BUILD_NUMBER} ."
            //Docker Login
            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin"
            //Docker imageHub push
            sh "docker push ${DOCKER_IMAGE_BACK}:1.${env.BUILD_NUMBER}"
          }
        }
      }
    stage('SSH transfer') {
        steps {
            script {
                def isOdd = (env.BUILD_NUMBER.toInteger() % 2 != 0)
                def deploymentFileName = isOdd ? 'deployment-blue' : 'deployment-green'
                def otherDeploymentFileName = isOdd ? 'deployment-green' : 'deployment-blue'
                def newSelector = isOdd ? 'blue' : 'green'
                def serviceName = 'backend-svc'
                def socialServiceName = 'social-svc-fix'

                // SSH 전송 플러그인 사용
                sshPublisher(
                    // 오류 발생 시 진행을 멈춤
                    continueOnError: false,
                    // 오류 발생 시 파이프라인을 실패시킴
                    failOnError: true,
                    // 전송자 목록
                    publishers: [
                    // SSH 전송 설명
                        sshPublisherDesc(
                            // SSH 서버 설정 이름 지정 ( master 노드 )
                            configName: "kube-master",
                            // 자세한 출력 모드 활성화
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "cicd/backend/kubernetes/${deploymentFileName}.yml",
                                    remoteDirectory: "/home/test/",
                                    execCommand: """
                                    sed -i "s/latest/1.${env.BUILD_NUMBER}/g" /home/test/cicd/backend/kubernetes/${deploymentFileName}.yml

                                    # 디플로이먼트 적용
                                    kubectl apply -f /home/test/cicd/backend/kubernetes/${deploymentFileName}.yml

                                    # kubectl scale deployment ${deploymentFileName} --replicas=2
                                    # kubectl wait --for=condition=ready pod -l deployment=${deploymentFileName} --timeout=120s

                                    # 새로운 파드가 준비 상태가 될 때까지 대기
                                    kubectl rollout status deployment/backend-${deploymentFileName} --timeout=60s

                                    # 서비스의 셀렉터 변경
                                    kubectl patch service ${serviceName} -p '{"spec":{"selector":{"deployment":"${newSelector}","type":"backend"}}}'
                                    kubectl patch service ${socialServiceName} -p '{"spec":{"selector":{"deployment":"${newSelector}","type":"backend"}}}'


                                    # 전환 후 일정 시간 대기
                                    sleep 10

                                    kubectl scale --replicas=0 -f /home/test/cicd/backend/kubernetes/${otherDeploymentFileName}.yml


                                    """
                                )
                            ]
                        )
                    ]
                )
            }
        }
    }
  }
  post {
    success {
	    // credentialsId - 아까 설정한 웹훅 ID | variable - 변수명(마음대로 설정)
	    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]){
						discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공", 
                        webhookURL: "$DISCORD"
			}
		}
	failure {
	    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                        discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패", 
                        webhookURL: "$DISCORD"
			}
		}
	}
}